name: Java CI with Gradle

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'

jobs:
  # 1. Build and upload both JARs as one artifact
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: temurin

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties','**/*.gradle*','**/*.kts') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build project
        run: ./gradlew build --no-daemon

      - name: Upload all JARs together
        uses: actions/upload-artifact@v4
        with:
          name: built-jars
          path: versions/1.8.9-forge/build/libs/*.jar

  # 2. Download that artifact, discover exactly two JARs, emit JSON array
  find-jars:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      jar-array: ${{ steps.set-jars.outputs.jar-array }}
    steps:
      - name: Download built-jars artifact
        uses: actions/download-artifact@v4
        with:
          name: built-jars
          path: libs

      - name: Discover and export JAR filenames
        id: set-jars
        run: |
          cd libs
          # collect all .jar files
          jars=( *.jar )
          if [ "${#jars[@]}" -ne 2 ]; then
            echo "❌ Expected 2 JARs but found ${#jars[@]}" >&2
            exit 1
          fi

          # build comma-separated, quoted list: "A.jar","B.jar"
          items=""
          for f in "${jars[@]}"; do
            items="${items}\"${f}\","
          done
          items="${items%,}"        # remove trailing comma

          # wrap and export as JSON array: ["A.jar","B.jar"]
          json="[${items}]"
          echo "jar-array=${json}" >> "$GITHUB_OUTPUT"
  

  # 3. Matrix over the two filenames and upload individually
  upload-individual:
    needs: find-jars
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jar: ${{ fromJson(needs.find-jars.outputs.jar-array) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: built-jars
          path: libs

      - name: Upload ${{ matrix.jar }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.jar }}
          path: libs/${{ matrix.jar }}